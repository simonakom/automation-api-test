{
	"info": {
		"_postman_id": "07e56be3-f218-4fe4-892e-745cdc61ce06",
		"name": "automation-exercise",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32368873"
	},
	"item": [
		{
			"name": "1. Get All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"const products = response.products;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 200\", function () {",
							"    pm.expect(response.responseCode).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Field 'products' is present in the response\", function () {",
							"    pm.expect(response).to.have.property('products');",
							"});",
							"",
							"pm.test(\"'Products' array is not empty\", function () {",
							"    pm.expect(products).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Product object has correct structure\", function () {",
							"    products.forEach(function (product) {",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('price');",
							"        pm.expect(product).to.have.property('brand');",
							"        pm.expect(product).to.have.property('category');",
							"        pm.expect(product.category).to.have.property('usertype');",
							"        pm.expect(product.category.usertype).to.have.property('usertype');",
							"        pm.expect(product.category).to.have.property('category');",
							"    });",
							"});",
							"",
							"pm.test(\"Object properties are of the expected types\", function () {",
							"    products.forEach(function (product) {",
							"       pm.expect(product.id).to.be.a('number');",
							"       pm.expect(product.name).to.be.a('string');",
							"       pm.expect(product.price).to.match(/^Rs\\. \\d+$/);",
							"       pm.expect(product.brand).to.be.a('string');",
							"       pm.expect(product.category).to.be.an('object')",
							"       pm.expect(product.category.usertype).to.be.an('object')",
							"       pm.expect(product.category.usertype.usertype).to.be.a('string')",
							"       pm.expect(product.category.category).to.be.a('string')",
							"    });",
							"});",
							"",
							"pm.test(\"All products IDs are unique\", function () {",
							"    const ids = products.map(product => product.id);",
							"    const uniqueIds = new Set(ids);",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/productsList",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. POST To All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 405\", function () {",
							"    pm.expect(response.responseCode).to.eql(405);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This request method is not supported.\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/api/productsList",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Get All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"const brand = response.brands;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 200\", function () {",
							"    pm.expect(response.responseCode).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Field 'brands' is present in the response\", function () {",
							"    pm.expect(response).to.have.property('brands');",
							"});",
							"",
							"pm.test(\"'Brands' array is not empty\", function () {",
							"    pm.expect(brand).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"'Brands' object has correct structure\", function () {",
							"    brand.forEach(function (brand) {",
							"        pm.expect(brand).to.have.property('id');",
							"        pm.expect(brand).to.have.property('brand');",
							"    });",
							"});",
							"",
							"pm.test(\"Object properties are of the expected types\", function () {",
							"    brand.forEach(function (brand) {",
							"       pm.expect(brand.id).to.be.a('number');",
							"       pm.expect(brand.brand).to.be.a('string');",
							"    });",
							"});",
							"",
							"pm.test(\"All brands IDs are unique\", function () {",
							"    const ids = response.brands.map(brand => brand.id); ",
							"    const uniqueIds = new Set(ids);",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/brandsList",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. PUT To All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 405\", function () {",
							"    pm.expect(response.responseCode).to.eql(405);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This request method is not supported.\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{url}}/api/brandsList",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. POST To Search Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"const products = response.products;",
							"const keyword = pm.variables.get(\"keyword\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 200\", function () {",
							"    pm.expect(response.responseCode).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Field 'products' is present in the response\", function () {",
							"    pm.expect(response).to.have.property('products');",
							"});",
							"",
							"pm.test(\"'Products' array is not empty\", function () {",
							"    pm.expect(products).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Product object has correct structure\", function () {",
							"    products.forEach(function (product) {",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('price');",
							"        pm.expect(product).to.have.property('brand');",
							"        pm.expect(product).to.have.property('category');",
							"        pm.expect(product.category).to.have.property('usertype');",
							"        pm.expect(product.category.usertype).to.have.property('usertype');",
							"        pm.expect(product.category).to.have.property('category');",
							"    });",
							"});",
							"",
							"pm.test(\"Object properties are of the expected types\", function () {",
							"    products.forEach(function (product) {",
							"       pm.expect(product.id).to.be.a('number');",
							"       pm.expect(product.name).to.be.a('string');",
							"       pm.expect(product.price).to.match(/^Rs\\. \\d+$/);",
							"       pm.expect(product.brand).to.be.a('string');",
							"       pm.expect(product.category).to.be.an('object')",
							"       pm.expect(product.category.usertype).to.be.an('object')",
							"       pm.expect(product.category.usertype.usertype).to.be.a('string')",
							"       pm.expect(product.category.category).to.be.a('string')",
							"    });",
							"});",
							"",
							"pm.test(\"All products IDs are unique\", function () {",
							"    const ids = products.map(product => product.id);",
							"    const uniqueIds = new Set(ids);",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Each product contains 'keyword' in name, category, or brand\", function () {",
							"    products.forEach(function (product) {",
							"        const nameContainsKeyword = product.name.toLowerCase().includes(keyword.toLowerCase());",
							"        const categoryContainsKeyword = product.category.category.toLowerCase().includes(keyword.toLowerCase());",
							"        const brandContainsKeyword = product.brand.toLowerCase().includes(keyword.toLowerCase());",
							"        pm.expect(nameContainsKeyword || categoryContainsKeyword || brandContainsKeyword).to.be.true;",
							"    });",
							"});",
							"",
							"pm.test(\"Request contains search_product parameter\", function () {",
							"    const searchProduct = pm.request.body.formdata.find(param => param.key === \"search_product\");",
							"    pm.expect(searchProduct).to.not.be.undefined;",
							"    pm.expect(searchProduct.value).to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "{{keyword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/searchProduct",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. POST To Search Product without search_product parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 400\", function () {",
							"    pm.expect(response.responseCode).to.eql(400);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Bad request, search_product parameter is missing in POST request.\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/api/searchProduct",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "11. POST To Create/Register User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"const products = response.products;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 201\", function () {",
							"    pm.expect(response.responseCode).to.eql(201);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User created!\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"pm.test(\"Request contains all required parameters\", function () {",
							"    const requiredFields = ['name', 'email', 'password', 'title', 'birth_date', 'birth_month', 'birth_year', 'firstname', 'lastname', 'company', 'address1', 'address2', 'country', 'zipcode', 'state', 'city', 'mobile_number'];",
							"    const requestBody = pm.request.body.formdata;",
							"",
							"    requiredFields.forEach(field => {",
							"        const param = requestBody.find(param => param.key === field);",
							"        pm.expect(param).to.not.be.undefined;",
							"        pm.expect(param.value).to.not.be.empty;",
							"    });",
							"});",
							"",
							"pm.test(\"Email format is valid\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\").value;",
							"    ",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"    pm.expect(email).to.match(emailRegex);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const uniqueId = Date.now();",
							"",
							"pm.collectionVariables.set(\"unique_name\", \"User_\" + uniqueId);",
							"pm.collectionVariables.set(\"unique_email\", \"user\" + uniqueId + \"@test.com\");",
							"pm.collectionVariables.set(\"unique_password\", \"password\" + uniqueId);",
							"pm.collectionVariables.set(\"unique_firstname\", \"FirstName_\" + uniqueId);",
							"pm.collectionVariables.set(\"unique_lastname\", \"LastName_\" + uniqueId);",
							"pm.collectionVariables.set(\"unique_mobile\", \"555\" + Math.floor(1000000000 + Math.random() * 9000000000)); ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{unique_name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{unique_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{unique_password}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "Miss",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "02/05/1995",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "05",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1995",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "{{unique_firstname}}",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{unique_lastname}}",
							"type": "text"
						},
						{
							"key": "company",
							"value": "Apple",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "123 Main St",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Apt 4B",
							"type": "text"
						},
						{
							"key": "country",
							"value": "United States ",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "11201",
							"type": "text"
						},
						{
							"key": "state",
							"value": "California",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Los Angeles ",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "{{unique_mobile}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/createAccount",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. POST To Verify Login with valid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 200\", function () {",
							"    pm.expect(response.responseCode).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User exists!\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"pm.test(\"Request contains email and password\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\");",
							"    const password = requestBody.find(param => param.key === \"password\");",
							"    ",
							"    pm.expect(email).to.not.be.undefined;",
							"    pm.expect(password).to.not.be.undefined;",
							"    ",
							"    pm.expect(email.value).to.not.be.empty;",
							"    pm.expect(password.value).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Email format is valid\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\").value;",
							"    ",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"    pm.expect(email).to.match(emailRegex);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{unique_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{unique_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/verifyLogin",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. POST To Verify Login without email parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 400\", function () {",
							"    pm.expect(response.responseCode).to.eql(400);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Bad request, email or password parameter is missing in POST request.\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"pm.test(\"Request contains password\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const password = requestBody.find(param => param.key === \"password\");",
							"    ",
							"    pm.expect(password).to.not.be.undefined;",
							"    pm.expect(password.value).to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "password",
							"value": "{{unique_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/verifyLogin",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. DELETE To Verify Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 405\", function () {",
							"    pm.expect(response.responseCode).to.eql(405);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This request method is not supported.\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/verifyLogin",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "10. POST To Verify Login with invalid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 404\", function () {",
							"    pm.expect(response.responseCode).to.eql(404);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User not found!\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"pm.test(\"Request contains email and password\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\");",
							"    const password = requestBody.find(param => param.key === \"password\");",
							"    ",
							"    pm.expect(email).to.not.be.undefined;",
							"    pm.expect(password).to.not.be.undefined;",
							"    ",
							"    pm.expect(email.value).to.not.be.empty;",
							"    pm.expect(password.value).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Email format is valid\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\").value;",
							"    ",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"    pm.expect(email).to.match(emailRegex);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "incorrect@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "incorrect",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/verifyLogin",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "13. PUT METHOD To Update User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"const products = response.products;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 200\", function () {",
							"    pm.expect(response.responseCode).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User updated!\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"pm.test(\"Request contains all required parameters\", function () {",
							"    const requiredFields = ['name', 'email', 'password', 'title', 'birth_date', 'birth_month', 'birth_year', 'firstname', 'lastname', 'company', 'address1', 'address2', 'country', 'zipcode', 'state', 'city', 'mobile_number'];",
							"    const requestBody = pm.request.body.formdata;",
							"",
							"    requiredFields.forEach(field => {",
							"        const param = requestBody.find(param => param.key === field);",
							"        pm.expect(param).to.not.be.undefined;",
							"        pm.expect(param.value).to.not.be.empty;",
							"    });",
							"});",
							"",
							"pm.test(\"Email format is valid\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\").value;",
							"    ",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"    pm.expect(email).to.match(emailRegex);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{unique_name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{unique_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{unique_password}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "Miss",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "10/10/2005",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "10",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "2005",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "{{unique_firstname}}",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{unique_lastname}}",
							"type": "text"
						},
						{
							"key": "company",
							"value": "Apple",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "123 Main St",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Apt 4B",
							"type": "text"
						},
						{
							"key": "country",
							"value": "United States ",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "11201",
							"type": "text"
						},
						{
							"key": "state",
							"value": "California",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Los Angeles ",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "{{unique_mobile}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/updateAccount",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"updateAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "14. GET user account detail by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() \r",
							"const user = response.user;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.expect(response.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a JSON body\", function () {\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Field 'user' is present in the response\", function () {\r",
							"    pm.expect(response).to.have.property('user');\r",
							"});\r",
							"\r",
							"pm.test(\"'User' object is not empty\", function () {\r",
							"    pm.expect(user).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"User object has the correct structure\", function () {\r",
							"    pm.expect(user).to.have.property('id');\r",
							"    pm.expect(user).to.have.property('name');\r",
							"    pm.expect(user).to.have.property('email');\r",
							"    pm.expect(user).to.have.property('title');\r",
							"    pm.expect(user).to.have.property('birth_day');\r",
							"    pm.expect(user).to.have.property('birth_month');\r",
							"    pm.expect(user).to.have.property('birth_year');\r",
							"    pm.expect(user).to.have.property('first_name');\r",
							"    pm.expect(user).to.have.property('last_name');\r",
							"    pm.expect(user).to.have.property('company');\r",
							"    pm.expect(user).to.have.property('address1');\r",
							"    pm.expect(user).to.have.property('address2');\r",
							"    pm.expect(user).to.have.property('country');\r",
							"    pm.expect(user).to.have.property('state');\r",
							"    pm.expect(user).to.have.property('city');\r",
							"    pm.expect(user).to.have.property('zipcode');\r",
							"});\r",
							"\r",
							"pm.test(\"Object properties are of the expected types\", function () {\r",
							"    pm.expect(user.id).to.be.a('number');\r",
							"    pm.expect(user.name).to.be.a('string');\r",
							"    pm.expect(user.email).to.be.a('string');\r",
							"    pm.expect(user.title).to.be.a('string');\r",
							"    pm.expect(user.birth_day).to.be.a('string');\r",
							"    pm.expect(user.birth_month).to.be.a('string');\r",
							"    pm.expect(user.birth_year).to.be.a('string');\r",
							"    pm.expect(user.first_name).to.be.a('string');\r",
							"    pm.expect(user.last_name).to.be.a('string');\r",
							"    pm.expect(user.company).to.be.a('string');\r",
							"    pm.expect(user.address1).to.be.a('string');\r",
							"    pm.expect(user.address2).to.be.a('string');\r",
							"    pm.expect(user.country).to.be.a('string');\r",
							"    pm.expect(user.state).to.be.a('string');\r",
							"    pm.expect(user.city).to.be.a('string');\r",
							"    pm.expect(user.zipcode).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Request contains email\", function () {\r",
							"    const requestBody = pm.request.body.formdata;\r",
							"    const email = requestBody.find(param => param.key === \"email\");\r",
							"    \r",
							"    pm.expect(email).to.not.be.undefined;    \r",
							"    pm.expect(email.value).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{unique_email}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/getUserDetailByEmail?email={{unique_email}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"getUserDetailByEmail"
					],
					"query": [
						{
							"key": "email",
							"value": "{{unique_email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "12. DELETE METHOD To Delete User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json() ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response code is 200\", function () {",
							"    pm.expect(response.responseCode).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(Object.keys(response)).to.have.length.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has a message\", function () {",
							"    pm.expect(response).to.have.property(\"message\");",
							"});",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    pm.expect(response.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Account deleted!\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response does not contain extra keys\", function () {",
							"    const expectedKeys = ['responseCode', 'message'];",
							"    const actualKeys = Object.keys(response);",
							"    pm.expect(actualKeys).to.eql(expectedKeys);",
							"});",
							"",
							"pm.test(\"Request contains email and password\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\");",
							"    const password = requestBody.find(param => param.key === \"password\");",
							"    ",
							"    pm.expect(email).to.not.be.undefined;",
							"    pm.expect(password).to.not.be.undefined;",
							"    ",
							"    pm.expect(email.value).to.not.be.empty;",
							"    pm.expect(password.value).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Email format is valid\", function () {",
							"    const requestBody = pm.request.body.formdata;",
							"    const email = requestBody.find(param => param.key === \"email\").value;",
							"    ",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"    pm.expect(email).to.match(emailRegex);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{unique_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{unique_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/deleteAccount",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"deleteAccount"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://automationexercise.com",
			"type": "string"
		},
		{
			"key": "unique_name",
			"value": "Monika"
		},
		{
			"key": "unique_email",
			"value": "monika@gmail.com",
			"type": "string"
		},
		{
			"key": "unique_password",
			"value": "SecurePass123!",
			"type": "string"
		},
		{
			"key": "unique_firstname",
			"value": "Monika"
		},
		{
			"key": "unique_lastname",
			"value": "Clark"
		},
		{
			"key": "unique_mobile",
			"value": "+1234567890"
		},
		{
			"key": "keyword",
			"value": "top"
		}
	]
}